(function(){"use strict";var e={425:function(e,t,s){var o={};s.r(o),s.d(o,{r:function(){return B}});var i=s(751),n=s(641);function a(e,t,s,o,i,a){const r=(0,n.g2)("MainComp");return(0,n.uX)(),(0,n.Wv)(r,{msg:"Welcome to Your Vue.js App"})}const r={id:"app"},l={class:"content"};function c(e,t,s,o,i,a){const c=(0,n.g2)("AppNavbar"),u=(0,n.g2)("router-view"),d=(0,n.g2)("AppFooter");return(0,n.uX)(),(0,n.CE)("div",r,[(0,n.bF)(c),(0,n.Lk)("div",l,[(0,n.bF)(u)]),(0,n.bF)(d)])}const u=e=>((0,n.Qi)("data-v-749a9a25"),e=e(),(0,n.jt)(),e),d={class:"navbar navbar-expand-lg navbar-light bg-light"},h=u((()=>(0,n.Lk)("a",{class:"navbar-brand",href:"/"},"SQL MasterQuest",-1))),p=u((()=>(0,n.Lk)("button",{class:"navbar-toggler",type:"button","data-bs-toggle":"collapse","data-bs-target":"#navbarNav","aria-controls":"navbarNav","aria-expanded":"false","aria-label":"Toggle navigation"},[(0,n.Lk)("span",{class:"navbar-toggler-icon"})],-1))),m={class:"collapse navbar-collapse",id:"navbarNav"},f={class:"navbar-nav ms-auto"},g={class:"nav-item"},E={class:"nav-item"},T={class:"nav-item"};function v(e,t,s,o,i,a){const r=(0,n.g2)("router-link");return(0,n.uX)(),(0,n.CE)("nav",d,[h,p,(0,n.Lk)("div",m,[(0,n.Lk)("ul",f,[(0,n.Lk)("li",g,[(0,n.bF)(r,{to:"/",class:"nav-link",onClick:a.closeNavbar},{default:(0,n.k6)((()=>[(0,n.eW)("Home")])),_:1},8,["onClick"])]),(0,n.Lk)("li",E,[(0,n.bF)(r,{to:"/module",class:"nav-link",onClick:a.closeNavbar},{default:(0,n.k6)((()=>[(0,n.eW)("Practice Module")])),_:1},8,["onClick"])]),(0,n.Lk)("li",T,[(0,n.bF)(r,{to:"/contact",class:"nav-link",onClick:a.closeNavbar},{default:(0,n.k6)((()=>[(0,n.eW)("Contact")])),_:1},8,["onClick"])])])])])}var y=s(454),w={name:"AppNavbar",methods:{closeNavbar(){let e=document.getElementById("navbarNav");if(e.classList.contains("show")){let t=new y.SD(e,{toggle:!1});t.hide()}}}},S=s(262);const k=(0,S.A)(w,[["render",v],["__scopeId","data-v-749a9a25"]]);var O=k;const b=e=>((0,n.Qi)("data-v-b0a74c8c"),e=e(),(0,n.jt)(),e),I={class:"footer"},C=b((()=>(0,n.Lk)("p",null,"Â© 2024 SQL MasterQuest. All rights reserved.",-1))),R=[C];function L(e,t,s,o,i,a){return(0,n.uX)(),(0,n.CE)("footer",I,R)}var q={name:"AppFooter"};const A=(0,S.A)(q,[["render",L],["__scopeId","data-v-b0a74c8c"]]);var N=A,D={name:"App",components:{AppNavbar:O,AppFooter:N}};const P=(0,S.A)(D,[["render",c]]);var U=P,M=(s(736),{name:"App",components:{MainComp:U}});const F=(0,S.A)(M,[["render",a]]);var _=F;const B=[{id:1,level:"begin",description:"Query the `Posts` table to retrieve all details for questions posted on Stack Overflow. Identify these posts by filtering for entries where `PostTypeId` equals 1, which signifies a question. This initial task aims to familiarize you with basic data retrieval from a specific subset.",solution:"SELECT * FROM Posts WHERE PostTypeId = 1;",ruleDescription:"This task leverages the SELECT statement to fetch all columns from the `Posts` table, applying a WHERE clause to isolate questions. It's an essential skill for exploring specific types of data within a database.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/select-transact-sql"},{id:2,level:"begin",description:"From the `Posts` table, find all answers with a score greater than 100 to identify highly valued community contributions. Answers are distinguished by `PostTypeId` equal to 2. This task will teach you to filter data based on numerical criteria.",solution:"SELECT * FROM Posts WHERE PostTypeId = 2 AND Score > 100;",ruleDescription:"Here, the WHERE clause filters the dataset for answers based on their `Score`, demonstrating how to pinpoint records that meet specific numerical conditions.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/where-transact-sql"},{id:3,level:"begin",description:"List the top 10 most viewed questions in the `Posts` table, showing their titles and view counts. Sort the list by `ViewCount` in descending order to prioritize the most popular questions, introducing you to sorting and limiting results.",solution:"SELECT TOP 10 Title, ViewCount FROM Posts WHERE PostTypeId = 1 ORDER BY ViewCount DESC;",ruleDescription:"The combination of TOP and ORDER BY in this task is crucial for extracting a manageable list of top records based on a sorted attribute, facilitating easy identification of the most engaging questions.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/top-transact-sql"},{id:4,level:"begin",description:"Calculate the average score for all posts made in March 2013 by querying the `Posts` table. This task challenges you to use date ranges and aggregation functions to analyze specific periods.",solution:"SELECT AVG(Score) AS AverageScore FROM Posts WHERE CreationDate >= '2013-03-01' AND CreationDate < '2013-04-01';",ruleDescription:"Applying the AVG() function to a filtered date range within the WHERE clause provides insight into the performance or reception of content during that time frame, highlighting the utility of aggregate functions in temporal analysis.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/avg-transact-sql"},{id:5,level:"begin",description:"Use the `Comments` table to count the number of comments for each post. This task introduces you to grouping and counting in SQL, allowing you to gauge the level of engagement for various discussions.",solution:"SELECT PostId, COUNT(*) AS NumberOfComments FROM Comments GROUP BY PostId;",ruleDescription:"Grouping data with GROUP BY and counting instances with COUNT(*) provides a method to quantify engagement or occurrences, essential for summarizing and analyzing grouped datasets effectively.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/select-group-by-transact-sql"},{id:6,level:"begin",description:"From the `Posts` table, identify unique tags (using the `Tags` and `PostTags` tables) for questions with more than 10,000 views. This task requires joining the `Posts` table to `PostTags`, and then `PostTags` to `Tags`, to extract the tag names for popular questions.",solution:"SELECT DISTINCT t.TagName FROM Tags t JOIN PostTags pt ON t.Id = pt.TagId JOIN Posts p ON pt.PostId = p.Id WHERE p.ViewCount > 10000 AND p.PostTypeId = 1;",ruleDescription:"This task demonstrates how to use SQL JOINs to link multiple tables and the DISTINCT keyword to remove duplicate entries, focusing on data filtering with the WHERE clause to meet specific conditions.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/joins-transact-sql"},{id:7,level:"begin",description:"Using the `Posts` table, group answers by their parent questions (identified by `ParentId`) and count the total number of answers for each question. Then, filter to show only questions with more than 5 answers to identify highly discussed topics.",solution:"SELECT ParentId, COUNT(*) AS TotalAnswers FROM Posts WHERE PostTypeId = 2 GROUP BY ParentId HAVING COUNT(*) > 5;",ruleDescription:"This task introduces grouping data with GROUP BY and filtering groups with HAVING, allowing you to analyze data subsets based on aggregate values, like counting occurrences.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/select-group-by-transact-sql"},{id:8,level:"begin",description:"Find the most recent 5 questions added to the Stack Overflow database by querying the `Posts` table. Sort the questions by their `CreationDate` in descending order to ensure the latest discussions are listed first.",solution:"SELECT TOP 5 Id, Title FROM Posts WHERE PostTypeId = 1 ORDER BY CreationDate DESC;",ruleDescription:"Leveraging the TOP clause with ORDER BY provides a method to limit query results to a specified number of top entries, based on sorting criteria. This is ideal for tracking recent additions or changes.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/top-transact-sql"},{id:9,level:"begin",description:"Compute the average score of posts by each user to evaluate the community's reception of their content. Aggregate data from the `Posts` table by `OwnerUserId`, applying the AVG function to the `Score` column.",solution:"SELECT OwnerUserId, AVG(Score) AS AveragePostScore FROM Posts GROUP BY OwnerUserId;",ruleDescription:"Using AVG() with GROUP BY allows for the calculation of average values within each group defined by a common attribute, facilitating an understanding of trends or general performance within subsets of data.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/avg-transact-sql"},{id:10,level:"begin",description:"Identify users who have not posted since January 1, 2013. This task involves selecting from the `Users` table and excluding those who have related records in the `Posts` table after this date, showcasing the use of NOT EXISTS.",solution:"SELECT u.Id, u.DisplayName FROM Users u WHERE NOT EXISTS (SELECT 1 FROM Posts p WHERE p.OwnerUserId = u.Id AND p.CreationDate >= '2013-01-01');",ruleDescription:"The NOT EXISTS clause is used to find rows in a table that do not match conditions specified in a subquery. It's a powerful tool for exclusion-based filtering, useful for identifying gaps or absences in data relationships.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/exists-transact-sql"},{id:11,level:"begin",description:"Find the number of views for the most viewed question in the `Posts` table. This will help you understand how to identify record extremes in a dataset.",solution:"SELECT MAX(ViewCount) AS MaxViewCount FROM Posts WHERE PostTypeId = 1;",ruleDescription:"Using the MAX() function allows you to find the highest number in a numerical column, in this case, to determine the most viewed question. It's a crucial function for analyzing data ranges and extremes.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/max-transact-sql"},{id:12,level:"begin",description:"Retrieve the titles of all questions that have been closed, marked by a non-null `ClosedDate` in the `Posts` table. This task introduces working with NULL values to filter records.",solution:"SELECT Title FROM Posts WHERE PostTypeId = 1 AND ClosedDate IS NOT NULL;",ruleDescription:"Filtering with IS NOT NULL checks for non-empty values in a column, allowing you to isolate records that meet specific lifecycle criteria, such as being closed.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/where-transact-sql"},{id:13,level:"begin",description:"Calculate the total score accumulated by all answers on the site using the `Posts` table. This task will get you familiar with summing values across a large number of records.",solution:"SELECT SUM(Score) AS TotalAnswerScore FROM Posts WHERE PostTypeId = 2;",ruleDescription:"The SUM() function aggregates numerical data, providing the total sum of a column's values where the conditions are met, offering insight into cumulative metrics such as total score.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/sum-transact-sql"},{id:14,level:"begin",description:"List all users who have posted more than 10 answers, using the `Posts` table. Group the results by `OwnerUserId` and count the number of posts per user.",solution:"SELECT OwnerUserId, COUNT(*) AS NumberOfAnswers FROM Posts WHERE PostTypeId = 2 GROUP BY OwnerUserId HAVING COUNT(*) > 10;",ruleDescription:"This task teaches the application of GROUP BY in conjunction with HAVING for filtering groups based on a count condition, useful for identifying highly active contributors in specific areas.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/select-group-by-transact-sql"},{id:15,level:"begin",description:"Identify the first question ever asked on Stack Overflow by finding the minimum `CreationDate` in the `Posts` table for questions.",solution:"SELECT Id, Title, MIN(CreationDate) AS FirstQuestionDate FROM Posts WHERE PostTypeId = 1;",ruleDescription:"The MIN() function finds the earliest date in a dataset, which in this context helps pinpoint the inception of community interactions on the platform.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/min-transact-sql"}];var W=s(220);const Y={class:"containerMain"},x=(0,n.Fv)('<div class="about" data-v-6fe7d5c0><h1 data-v-6fe7d5c0>Welcome to SQL Master!</h1><p class="introduction" data-v-6fe7d5c0> Embark on Your SQL Mastery Adventure with SQL Master! </p><p data-v-6fe7d5c0> Dive into the thrilling world of SQL with <strong data-v-6fe7d5c0>SQL Master</strong>, your ultimate interactive companion crafted to elevate your SQL prowess using the intriguing data from the 2013 StackOverflow database. Unleash your potential and embark on a quest filled with challenges tailored to every skill level. </p><h2 class="headferH2" data-v-6fe7d5c0>Why SQL Master? Uncover the Features:</h2><div class="li" data-v-6fe7d5c0><ul class="features-list" data-v-6fe7d5c0><li data-v-6fe7d5c0><strong data-v-6fe7d5c0>Choose Your Adventure:</strong> From the curious beginner to the seasoned pro, select challenges that resonate with your current skill level or dare to leap beyond. </li><li data-v-6fe7d5c0><strong data-v-6fe7d5c0>Real-World Quests:</strong> Engage with tasks carved out of real data from the 2013 StackOverflow treasure trove. </li><li data-v-6fe7d5c0><strong data-v-6fe7d5c0>Track Your Triumphs:</strong> Watch your progress flourish in real-time. </li><li data-v-6fe7d5c0><strong data-v-6fe7d5c0>Seamless Exploration:</strong> Glide through tasks and levels with ease. </li><li id="wisdom" data-v-6fe7d5c0><strong data-v-6fe7d5c0>Wisdom at Your Fingertips:</strong> Each task is a lesson waiting to unfold, accompanied by concise guides on rules and techniques. </li><li data-v-6fe7d5c0><strong data-v-6fe7d5c0>Access the Oracle:</strong> Whenever you seek deeper knowledge, the portal to official Microsoft Learn documentation stands ready. </li></ul></div><p class="conclusion" data-v-6fe7d5c0> Are you ready to begin your odyssey to SQL mastery? The path to becoming a SQL hero starts today! </p></div>',1),H=[x];function G(e,t,s,o,i,a){return(0,n.uX)(),(0,n.CE)("div",Y,H)}var V={name:"NavMain"};const Q=(0,S.A)(V,[["render",G],["__scopeId","data-v-6fe7d5c0"]]);var J=Q,j=s(33);const X=e=>((0,n.Qi)("data-v-715cc830"),e=e(),(0,n.jt)(),e),z={class:"home",id:"mainBlock"},K={class:"button-group mb-3"},$={class:"button-group mb-3 mt-0"},Z={class:"content-area"},ee={class:"block half me-1 d-flex flex-column"},te={class:"part w-100 mb-0",id:"levelSelect"},se={id:"instructionWrapper"},oe={key:0},ie={key:1,id:"task"},ne={key:2,id:"noTasksMessage"},ae={id:"questionsNav",class:"d-flex justify-content-between mb-3"},re=X((()=>(0,n.Lk)("div",{class:"divider"},null,-1))),le={class:"part w-100",style:{"flex-grow":"2"}},ce={class:"d-flex justify-content-between align-items-center"},ue={id:"result",class:"result-placeholder mt-3"},de={class:"block half ms-1",id:"rulesDesc"},he=X((()=>(0,n.Lk)("h2",{class:"rulsHeader"},"Essential Rules and Guidelines",-1))),pe={class:"rules"},me={class:"LinkButtonDiv"},fe={key:1,class:"LinkButtonDiv2"},ge={class:"currentLevelInfo"},Ee=X((()=>(0,n.Lk)("header",{class:"h5"},"Task Progress Tracker",-1))),Te={class:"currentLevelProgres"},ve={id:"taskStatuses"},ye=["onClick"];function we(e,t,s,o,a,r){return(0,n.uX)(),(0,n.CE)("div",z,[(0,n.Lk)("div",K,[(0,n.Lk)("button",{type:"button",class:"btn btn-lg",onClick:t[0]||(t[0]=e=>r.selectLevel("Basic"))}," Basic "),(0,n.Lk)("button",{type:"button",class:"btn btn-lg",onClick:t[1]||(t[1]=e=>r.selectLevel("Intermediate"))}," Intermediate "),(0,n.Lk)("button",{type:"button",class:"btn btn-lg",onClick:t[2]||(t[2]=e=>r.selectLevel("Advanced"))}," Advanced "),(0,n.Lk)("button",{type:"button",class:"btn btn-lg",onClick:t[3]||(t[3]=e=>r.selectLevel("WindowFunction"))}," Window function ")]),(0,n.Lk)("div",$,[(0,n.Lk)("button",{type:"button",class:"btn btn-lg",onClick:t[4]||(t[4]=e=>r.selectLevel("Apply"))}," Apply "),(0,n.Lk)("button",{type:"button",class:"btn btn-lg",onClick:t[5]||(t[5]=e=>r.selectLevel("Joins"))}," Joins "),(0,n.Lk)("button",{type:"button",class:"btn btn-lg",onClick:t[6]||(t[6]=e=>r.selectLevel("SQLFunction"))}," Function in SQL "),(0,n.Lk)("button",{type:"button",class:"btn btn-lg",onClick:t[7]||(t[7]=e=>r.selectLevel("View"))}," View ")]),(0,n.Lk)("div",Z,[(0,n.Lk)("div",ee,[(0,n.Lk)("div",te,(0,j.v_)(a.taskTitle),1),(0,n.Lk)("div",se,[a.filteredTasks.length?r.currentTask?((0,n.uX)(),(0,n.CE)("p",ie,(0,j.v_)(r.currentTask.description),1)):((0,n.uX)(),(0,n.CE)("p",ne,"No tasks available.")):((0,n.uX)(),(0,n.CE)("p",oe," Set Your Challenge: Choose a Level That Suits You "))]),(0,n.Lk)("div",ae,[(0,n.Lk)("button",{id:"prevQuestionBtn",onClick:t[8]||(t[8]=(...e)=>r.previousTask&&r.previousTask(...e))}," Previous question "),(0,n.Lk)("button",{id:"nextQuestionBtn",onClick:t[9]||(t[9]=(...e)=>r.nextTask&&r.nextTask(...e))},"Next question")]),re,(0,n.Lk)("div",le,[(0,n.Lk)("div",ce,[(0,n.Lk)("button",{id:"executeBtn",class:"btn-custom mt-3",onClick:t[10]||(t[10]=(...e)=>r.checkSolution&&r.checkSolution(...e))}," Execute "),(0,n.Lk)("span",ue,(0,j.v_)(a.resultMessage),1)]),(0,n.bo)((0,n.Lk)("textarea",{"onUpdate:modelValue":t[11]||(t[11]=e=>a.userSolution=e),class:(0,j.C4)(["textarea-sql",{"is-correct":!0===a.solutionCorrect,"is-incorrect":!1===a.solutionCorrect}]),id:"solutionTextArea",rows:"10",placeholder:"Enter the SQL query that solves the given task"},null,2),[[i.Jo,a.userSolution]]),a.showSolutionButton?((0,n.uX)(),(0,n.CE)("button",{key:0,id:"showSolutionBtn",onMousedown:t[12]||(t[12]=(...e)=>r.showSolution&&r.showSolution(...e)),onMouseup:t[13]||(t[13]=(...e)=>r.hideSolution&&r.hideSolution(...e)),onMouseleave:t[14]||(t[14]=(...e)=>r.hideSolution&&r.hideSolution(...e))}," Show correct answer ",32)):(0,n.Q3)("",!0)])]),(0,n.Lk)("div",de,[he,(0,n.Lk)("div",pe,[(0,n.Lk)("p",null,(0,j.v_)(a.ruleDescription),1),(0,n.Lk)("div",me,[a.link?((0,n.uX)(),(0,n.CE)("button",{key:0,onClick:t[15]||(t[15]=e=>r.openDocumentation(a.link)),class:"doc-button"}," Discover Microsoft Learn ")):((0,n.uX)(),(0,n.CE)("p",fe))])]),(0,n.Lk)("div",ge,[Ee,(0,n.Lk)("div",Te,[(0,n.Lk)("div",ve,[((0,n.uX)(!0),(0,n.CE)(n.FK,null,(0,n.pI)(a.taskSolvedStatus,((e,t)=>((0,n.uX)(),(0,n.CE)("div",{key:t,class:(0,j.C4)(["taskBlock",{correctTask:!0===e,incorrectTask:!1===e}]),onClick:e=>r.selectTask(t)},(0,j.v_)(t+1),11,ye)))),128))])])])])])])}const Se=[{id:1,level:"intermediate",description:"Join the `Users` table with the `Posts` table to display all users along with the titles of their posts.",solution:"SELECT u.DisplayName, p.Title FROM Users u JOIN Posts p ON u.Id = p.OwnerUserId;",ruleDescription:"This task uses an INNER JOIN to combine rows from the Users table with those from the Posts table where the user ID matches the post's owner ID, illustrating how to associate related data across tables.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/from-transact-sql"},{id:2,level:"intermediate",description:"Use a subquery to find all posts that have a higher score than the average score of all posts.",solution:"SELECT Title, Score FROM Posts WHERE Score > (SELECT AVG(Score) FROM Posts);",ruleDescription:"This task demonstrates the use of a subquery to calculate the average score of all posts. The main query then filters to select only those posts with scores higher than this average.",link:"https://docs.microsoft.com/en-us/sql/t-sql/language-elements/subqueries-transact-sql"},{id:3,level:"intermediate",description:"Create a CTE that selects all users with more than 100 posts, and then list these users by their post count.",solution:"WITH UserPostCounts AS (SELECT OwnerUserId, COUNT(*) AS PostCount FROM Posts GROUP BY OwnerUserId HAVING COUNT(*) > 100) SELECT u.DisplayName, upc.PostCount FROM UserPostCounts upc JOIN Users u ON upc.OwnerUserId = u.Id ORDER BY upc.PostCount DESC;",ruleDescription:"The CTE UserPostCounts aggregates the number of posts per user and filters for those with more than 100 posts. The final SELECT statement then joins this CTE with the Users table to display user names and post counts.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql"},{id:4,level:"intermediate",description:"Implement a query to list the top 5 tags by their number of associated posts using a GROUP BY clause.",solution:"SELECT TOP 5 t.TagName, COUNT(pt.PostId) AS NumberOfPosts FROM Tags t JOIN PostTags pt ON t.Id = pt.TagId GROUP BY t.TagName ORDER BY NumberOfPosts DESC;",ruleDescription:"This task uses a JOIN between the Tags and PostTags tables to count the number of posts associated with each tag. The GROUP BY clause organizes the results by tag name, and the ORDER BY clause sorts the tags by their post count in descending order.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/select-group-by-transact-sql"},{id:5,level:"intermediate",description:"Calculate the month-over-month percentage growth in new user signups.",solution:"WITH MonthlySignups AS (SELECT YEAR(CreationDate) AS Year, MONTH(CreationDate) AS Month, COUNT(*) AS Signups FROM Users GROUP BY YEAR(CreationDate), MONTH(CreationDate)) SELECT Year, Month, Signups, LAG(Signups) OVER (ORDER BY Year, Month) AS PreviousMonthSignups, ((Signups - LAG(Signups) OVER (ORDER BY Year, Month)) / LAG(Signups) OVER (ORDER BY Year, Month)) * 100 AS GrowthPercentage FROM MonthlySignups;",ruleDescription:"This complex query uses a CTE to calculate the number of user signups for each month. It then employs the LAG window function to compare signups month-over-month and calculates the percentage growth rate.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/select-transact-sql"},{id:6,level:"intermediate",description:"Identify posts with the 'CommunityWiki' flag that have received more than 50 upvotes.",solution:"SELECT Id, Title FROM Posts WHERE CommunityOwnedDate IS NOT NULL AND Score > 50;",ruleDescription:"This query filters for posts marked as Community Wiki (indicated by a non-null 'CommunityOwnedDate') and having more than 50 upvotes ('Score' > 50), demonstrating how to use multiple conditions in the WHERE clause for specific selections.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/where-transact-sql"},{id:7,level:"intermediate",description:"Use a window function to calculate the running total of upvotes for posts over time.",solution:"SELECT Id, CreationDate, Score, SUM(Score) OVER (ORDER BY CreationDate) AS RunningTotalScore FROM Posts WHERE PostTypeId = 1;",ruleDescription:"Applying the SUM() window function with an ORDER BY clause in the OVER() partition allows for the calculation of a cumulative sum of scores (upvotes) as you progress through the dataset chronologically.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/sum-transact-sql"},{id:8,level:"intermediate",description:"List all users and the count of their posts, including those who have not posted yet, by utilizing a LEFT JOIN.",solution:"SELECT u.DisplayName, COUNT(p.Id) AS PostCount FROM Users u LEFT JOIN Posts p ON u.Id = p.OwnerUserId GROUP BY u.DisplayName;",ruleDescription:"This query demonstrates the use of LEFT JOIN to include all users in the result set, even those without posts, and uses GROUP BY to aggregate the total count of posts for each user.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/from-transact-sql"},{id:9,level:"intermediate",description:"For each tag, show the most recent post using a window function.",solution:"SELECT DISTINCT TagId, FIRST_VALUE(PostId) OVER (PARTITION BY TagId ORDER BY CreationDate DESC) AS MostRecentPostId FROM PostTags;",ruleDescription:"The FIRST_VALUE() window function is used here within each partition of tags (TagId) to pick the first PostId in descending order by CreationDate, effectively selecting the most recent post for each tag.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/first-value-transact-sql"},{id:10,level:"intermediate",description:"Generate a list of the first posting date for every user, indicating their first interaction with the platform.",solution:"WITH FirstPosts AS (SELECT OwnerUserId, MIN(CreationDate) AS FirstPostDate FROM Posts GROUP BY OwnerUserId) SELECT u.DisplayName, fp.FirstPostDate FROM Users u JOIN FirstPosts fp ON u.Id = fp.OwnerUserId;",ruleDescription:"This CTE, 'FirstPosts', captures the earliest posting date for each user. Joining this CTE with the Users table allows matching users with their first post dates, illustrating how users began interacting with the platform.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql"}],ke=[{id:1,level:"advanced",description:"Optimize a query to find users who have both asked questions and provided answers but have not commented in the last year.",solution:"WITH UserActivity AS (SELECT OwnerUserId FROM Posts WHERE PostTypeId IN (1,2) GROUP BY OwnerUserId HAVING COUNT(DISTINCT PostTypeId) = 2), LastYearComments AS (SELECT DISTINCT UserId FROM Comments WHERE CreationDate >= DATEADD(year, -1, GETDATE())) SELECT ua.OwnerUserId FROM UserActivity ua WHERE ua.OwnerUserId NOT IN (SELECT UserId FROM LastYearComments);",ruleDescription:"This task combines CTEs and subqueries to isolate users engaging in both asking and answering but excludes those active in commenting recently. It showcases advanced use of grouping, aggregation, and date functions.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql"},{id:2,level:"advanced",description:"Create a partitioned view of the 'Posts' table that splits data into yearly segments for performance optimization.",solution:"CREATE VIEW Posts_Yearly AS SELECT * FROM Posts WHERE CreationDate BETWEEN '2020-01-01' AND '2020-12-31' UNION ALL SELECT * FROM Posts WHERE CreationDate BETWEEN '2021-01-01' AND '2021-12-31'; -- Repeat for each year",ruleDescription:"This task demonstrates how to create a partitioned view to optimize queries on large datasets by segmenting data into more manageable, yearly intervals. It uses UNION ALL to combine results from each segment.",link:"https://docs.microsoft.com/en-us/sql/t-sql/statements/create-view-transact-sql"},{id:3,level:"advanced",description:"Implement a dynamic SQL query to generate a report that includes a variable number of top-performing tags based on post score.",solution:"DECLARE @TopN INT = 5; EXEC sp_executesql N'SELECT TOP (@TopN) t.TagName, SUM(p.Score) AS TotalScore FROM Tags t JOIN PostTags pt ON t.Id = pt.TagId JOIN Posts p ON pt.PostId = p.Id GROUP BY t.TagName ORDER BY TotalScore DESC;', N'@TopN INT', @TopN;",ruleDescription:"This task uses dynamic SQL to allow for a variable, @TopN, determining the number of top tags to return based on their associated posts' scores. It illustrates executing complex queries with parameters.",link:"https://docs.microsoft.com/en-us/sql/t-sql/language-elements/execute-transact-sql"},{id:4,level:"advanced",description:"Write a query to calculate the median score of all posts, considering the distribution of scores.",solution:"SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Score) OVER () AS MedianScore FROM Posts;",ruleDescription:"This task applies the PERCENTILE_CONT window function to calculate the median score from the 'Posts' table. The function is used to find the middle value in the distribution of scores.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/percentile-cont-transact-sql"},{id:5,level:"advanced",description:"Design a recursive CTE to trace the hierarchy of comments on a post, identifying the root post and all subsequent replies.",solution:"WITH RecursiveComments AS (SELECT Id, ParentId, Body, 1 AS Level FROM Comments WHERE ParentId IS NULL UNION ALL SELECT c.Id, c.ParentId, c.Body, rc.Level + 1 FROM Comments c INNER JOIN RecursiveComments rc ON c.ParentId = rc.Id) SELECT * FROM RecursiveComments ORDER BY Level, ParentId;",ruleDescription:"This advanced task uses a recursive CTE to map out the comment threads for posts, showing how comments are nested. It illustrates recursion in SQL, a powerful tool for dealing with hierarchical or tree-structured data.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/with-common-table-expression-transact-sql"}],Oe=[{id:1,level:"apply",description:"Automate monthly report generation for top 10 most active users based on post activity, including questions, answers, and comments.",solution:"WITH ActivityCounts AS (SELECT OwnerUserId, COUNT(*) AS ActivityCount FROM Posts WHERE CreationDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY OwnerUserId UNION ALL SELECT UserId, COUNT(*) FROM Comments WHERE CreationDate >= DATEADD(MONTH, -1, GETDATE()) GROUP BY UserId) SELECT TOP 10 u.DisplayName, SUM(ac.ActivityCount) AS TotalActivities FROM ActivityCounts ac JOIN Users u ON ac.OwnerUserId = u.Id GROUP BY u.DisplayName ORDER BY TotalActivities DESC;",ruleDescription:"This solution combines data from Posts and Comments over the last month to calculate total user activity. A Common Table Expression (CTE) aggregates activity counts, which are then joined with the Users table to rank the most active users.",link:"https://docs.microsoft.com/en-us/sql/t-sql/statements/with-common-table-expression-transact-sql"},{id:2,level:"apply",description:"Identify and clean duplicate records in the 'Users' table based on email address, retaining only the most recently created account.",solution:"WITH DuplicateUsers AS (SELECT Email, MIN(CreationDate) as EarliestDate FROM Users GROUP BY Email HAVING COUNT(Email) > 1) DELETE FROM Users WHERE Email IN (SELECT Email FROM DuplicateUsers) AND CreationDate > (SELECT EarliestDate FROM DuplicateUsers WHERE Users.Email = DuplicateUsers.Email);",ruleDescription:"This approach identifies duplicates by email and uses a CTE to determine the earliest account creation date for duplicates. It then deletes newer duplicate accounts, preserving only the oldest account per email.",link:"https://docs.microsoft.com/en-us/sql/t-sql/statements/delete-transact-sql"},{id:3,level:"apply",description:"Develop a system to rank posts within each category based on view count, using a window function for real-time analytics.",solution:"SELECT CategoryId, PostId, ViewCount, RANK() OVER (PARTITION BY CategoryId ORDER BY ViewCount DESC) AS ViewRank FROM Posts;",ruleDescription:"This task applies a window function to assign a rank to posts based on view count within each category, enabling analysis of post popularity and engagement in real-time by category.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/rank-transact-sql"},{id:4,level:"apply",description:"Create a dynamic query to list all tables and their row counts in the current database for audit purposes.",solution:"DECLARE @TableName VARCHAR(MAX); DECLARE @SQLCmd AS VARCHAR(MAX) = ''; SELECT @SQLCmd = @SQLCmd + 'SELECT ''' + TABLE_NAME + ''' AS TableName, COUNT(*) AS RowCount FROM ' + TABLE_NAME + ' UNION ALL ' FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'; SET @SQLCmd = LEFT(@SQLCmd, LEN(@SQLCmd) - 10); EXEC(@SQLCmd);",ruleDescription:"Leveraging dynamic SQL, this task constructs and executes a command string that generates a unified report of table names and their corresponding row counts, aiding in database auditing and management.",link:"https://docs.microsoft.com/en-us/sql/t-sql/statements/execute-transact-sql"},{id:5,level:"apply",description:"Optimize retrieval of the latest post for each user, ensuring the query is performant even on large datasets.",solution:"SELECT u.Id, u.DisplayName, p.Id AS LatestPostId, p.CreationDate FROM Users u CROSS APPLY (SELECT TOP 1 Id, CreationDate FROM Posts WHERE OwnerUserId = u.Id ORDER BY CreationDate DESC) p;",ruleDescription:"Using the CROSS APPLY operator, this task efficiently fetches the most recent post for each user by directly correlating the Users and Posts tables, optimizing for performance on large datasets by minimizing row scans.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/from-transact-sql"}],be=[{id:1,level:"WindowFunctions",description:"Calculate the average salary within each department.",solution:"SELECT department, salary, AVG(salary) OVER (PARTITION BY department) AS avg_department_salary FROM employees;",ruleDescription:"This query uses the `AVG()` window function to calculate the average salary within each department, partitioned by the `department` column. Each row will include the average salary for its respective department alongside the individual salaries."},{id:2,level:"WindowFunctions",description:"Rank employees within their department based on their salary in descending order.",solution:"SELECT department, salary, RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS salary_rank FROM employees;",ruleDescription:"The `RANK()` window function assigns a rank to each employee based on their salary within the same department, ordered in descending order. Employees with the same salary receive the same rank."},{id:3,level:"WindowFunctions",description:"Get the cumulative sum of sales over time for each product.",solution:"SELECT product_id, sale_date, sales_amount, SUM(sales_amount) OVER (PARTITION BY product_id ORDER BY sale_date) AS cumulative_sales FROM sales;",ruleDescription:"This query calculates the cumulative sum of sales for each product over time using the `SUM()` window function, partitioned by `product_id` and ordered by `sale_date`."},{id:4,level:"WindowFunctions",description:"Identify the first sale date for each product.",solution:"SELECT product_id, sale_date, FIRST_VALUE(sale_date) OVER (PARTITION BY product_id ORDER BY sale_date) AS first_sale_date FROM sales;",ruleDescription:"The `FIRST_VALUE()` window function is used to find the first sale date for each product, partitioned by `product_id` and ordered by `sale_date`."},{id:5,level:"WindowFunctions",description:"Calculate the moving average of sales for the last 3 days for each product.",solution:"SELECT product_id, sale_date, sales_amount, AVG(sales_amount) OVER (PARTITION BY product_id ORDER BY sale_date ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS moving_avg_sales FROM sales;",ruleDescription:"This query computes the 3-day moving average of sales for each product using the `AVG()` window function, partitioned by `product_id` and ordered by `sale_date`, considering the current row and the two preceding rows."},{id:6,level:"WindowFunctions",description:"Determine the percentage of total sales each product represents for each day.",solution:"SELECT sale_date, product_id, sales_amount, sales_amount / SUM(sales_amount) OVER (PARTITION BY sale_date) AS sales_percentage FROM sales;",ruleDescription:"This query calculates the percentage of total sales each product represents for each day using the `SUM()` window function, partitioned by `sale_date`."},{id:7,level:"WindowFunctions",description:"Assign a sequential integer to each sale, starting with 1, for each product.",solution:"SELECT product_id, sale_date, ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY sale_date) AS sale_sequence FROM sales;",ruleDescription:"The `ROW_NUMBER()` window function assigns a unique sequential integer to sales for each product, ordered by `sale_date`, starting from 1."},{id:8,level:"WindowFunctions",description:"Find the difference in sales amount between each sale and the previous sale for each product.",solution:"SELECT product_id, sale_date, sales_amount, sales_amount - LAG(sales_amount, 1) OVER (PARTITION BY product_id ORDER BY sale_date) AS sales_diff FROM sales;",ruleDescription:"The `LAG()` window function is used to calculate the difference in sales amount between the current sale and the previous sale for each product, partitioned by `product_id` and ordered by `sale_date`."},{id:9,level:"WindowFunctions",description:"List each employee's salary and the average salary of their department, excluding their own salary.",solution:"SELECT employee_id, department, salary, (SUM(salary) OVER (PARTITION BY department) - salary) / (COUNT(salary) OVER (PARTITION BY department) - 1) AS avg_department_salary_excl_self FROM employees;",ruleDescription:"This query calculates the average salary within each department, excluding the salary of the current employee, by subtracting the employee's salary from the total sum and adjusting the count accordingly."},{id:10,level:"WindowFunctions",description:"Rank products by sales on their launch day compared to all products' launch day sales.",solution:"SELECT product_id, launch_date, sales_amount, RANK() OVER (ORDER BY sales_amount DESC) AS launch_day_sales_rank FROM product_launches;",ruleDescription:"This query ranks products based on their sales amount on the launch day, comparing them against the launch day sales of all products, without partitioning, to identify top performers."}],Ie=[{id:1,level:"joins",description:"Retrieve a list of users along with any posts theyâve commented on, but not authored.",solution:"SELECT DISTINCT u.DisplayName, p.Title FROM Users u JOIN Comments c ON u.Id = c.UserId JOIN Posts p ON c.PostId = p.Id WHERE u.Id != p.OwnerUserId;",ruleDescription:"This task uses a combination of JOIN operations to connect users to comments and then to the posts those comments are on, filtering out instances where the user is also the post author.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/from-transact-sql"},{id:2,level:"joins",description:"List all tags along with their associated posts, but only for posts that have been viewed more than 1000 times.",solution:"SELECT t.TagName, p.Title FROM Tags t JOIN PostTags pt ON t.Id = pt.TagId JOIN Posts p ON pt.PostId = p.Id WHERE p.ViewCount > 1000;",ruleDescription:"By joining the Tags, PostTags, and Posts tables, this query filters to include only those posts with over 1000 views, showcasing how to use multiple joins to narrow down data based on specific criteria.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/from-transact-sql"},{id:3,level:"joins",description:"Find users who have never posted an answer or comment on their own question.",solution:"SELECT u.DisplayName FROM Users u JOIN Posts q ON u.Id = q.OwnerUserId LEFT JOIN Comments c ON q.Id = c.PostId AND c.UserId = q.OwnerUserId LEFT JOIN Posts a ON q.Id = a.ParentId AND a.OwnerUserId = q.OwnerUserId WHERE q.PostTypeId = 1 AND c.Id IS NULL AND a.Id IS NULL;",ruleDescription:"This advanced join setup identifies users who only ask questions without directly engaging with their own posts through comments or answers, illustrating the use of LEFT JOIN and IS NULL to filter for lack of activity.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/from-transact-sql"},{id:4,level:"joins",description:"Aggregate the total score for all answers to each question, displaying the question title and total answer score.",solution:"SELECT q.Title, SUM(a.Score) AS TotalAnswerScore FROM Posts q LEFT JOIN Posts a ON q.Id = a.ParentId WHERE q.PostTypeId = 1 GROUP BY q.Title;",ruleDescription:"This task uses a LEFT JOIN to associate questions with their answers, then aggregates the scores of the answers per question, demonstrating how to combine aggregation with joins for insightful data summaries.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/select-group-by-transact-sql"},{id:5,level:"joins",description:"Show a list of questions tagged with 'SQL' that have no answers.",solution:"SELECT p.Title FROM Posts p JOIN PostTags pt ON p.Id = pt.PostId JOIN Tags t ON pt.TagId = t.Id LEFT JOIN Posts a ON p.Id = a.ParentId WHERE t.TagName = 'SQL' AND p.PostTypeId = 1 AND a.Id IS NULL;",ruleDescription:"Combining JOINs with a LEFT JOIN to identify questions (tagged 'SQL') without any answers by checking for NULL in the left-joined table of answers, this task leverages multiple types of joins to filter specific data relationships.",link:"https://docs.microsoft.com/en-us/sql/t-sql/queries/from-transact-sql"}],Ce=[{id:1,level:"functions",description:"Write a query to select the current server time using the GETDATE() function.",solution:"SELECT GETDATE() AS CurrentServerTime;",ruleDescription:"GETDATE() is a nondeterministic function that retrieves the current date and time from the SQL Server. This function can be used to record timestamps in data logging or to calculate age/time differences.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/getdate-transact-sql"},{id:2,level:"functions",description:"Use the SUSER_SNAME() function to retrieve the login name of the user.",solution:"SELECT SUSER_SNAME() AS LoginName;",ruleDescription:"SUSER_SNAME(), a nondeterministic function, returns the login name for a user based on their security identifier (SID). This can be particularly useful for auditing or tracking user activity in applications.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/suser-sname-transact-sql"},{id:3,level:"functions",description:"Create a list of employees' names and their years of experience, calculated from their hireDate to the current date.",solution:"SELECT Name, DATEDIFF(year, hireDate, GETDATE()) AS ExperienceYears FROM Employees;",ruleDescription:"DATEDIFF is a deterministic function that calculates the difference between two dates. In this task, it's used to calculate each employee's years of experience by subtracting their hire date from the current date.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/datediff-transact-sql"},{id:4,level:"functions",description:"Utilize the COUNT() function to determine the total number of posts made by each user.",solution:"SELECT OwnerUserId, COUNT(*) AS TotalPosts FROM Posts GROUP BY OwnerUserId;",ruleDescription:"COUNT() is an aggregate function that returns the number of items in a group. This task demonstrates its use to count the total number of posts made by each user, showcasing how aggregate functions can summarize data.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/count-transact-sql"},{id:5,level:"functions",description:"Display the highest score ever recorded in the 'Posts' table using the MAX() function.",solution:"SELECT MAX(Score) AS HighestScore FROM Posts;",ruleDescription:"MAX() is an aggregate function that finds the maximum value in a set. This task uses MAX() to find the highest post score, illustrating how to extract significant statistics from data.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/max-transact-sql"},{id:6,level:"functions",description:"Show the first name, last name, and the day of the week each employee was hired, using the DATENAME function.",solution:"SELECT firstName, lastName, DATENAME(weekday, hireDate) AS HireDayOfWeek FROM Employees;",ruleDescription:"DATENAME is a function that returns the specified part of a date as a string. In this task, it's used to find the day of the week on which employees were hired, demonstrating how to work with date parts in SQL.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/datename-transact-sql"}],Re=[{id:1,level:"view",description:"Create a view named `IT_Employees` to list the names and positions of all employees in the IT department.",solution:"CREATE VIEW IT_Employees AS SELECT Name, Position FROM Employees WHERE Department = 'IT';",ruleDescription:"This task introduces the concept of creating a simple view in SQL. view act as virtual tables representing the result set of a SQL query. `IT_Employees` view simplifies access to the list of IT department employees, making future queries against this dataset more straightforward.",link:"https://docs.microsoft.com/en-us/sql/t-sql/statements/create-view-transact-sql"},{id:2,level:"view",description:"Update the `IT_Employees` view to include employees' salaries.",solution:"CREATE OR ALTER VIEW IT_Employees AS SELECT Name, Position, Salary FROM Employees WHERE Department = 'IT';",ruleDescription:"This task demonstrates how to modify an existing view to add additional information. By including the salary column, the view now provides a more comprehensive overview of the IT department employees.",link:"https://docs.microsoft.com/en-us/sql/t-sql/statements/alter-view-transact-sql"},{id:3,level:"view",description:"Create a view named `UserPostsOverview` that provides the count of posts, average score, and maximum view count for each user.",solution:"CREATE VIEW UserPostsOverview AS SELECT OwnerUserId, COUNT(*) AS PostCount, AVG(Score) AS AvgScore, MAX(ViewCount) AS MaxView FROM Posts GROUP BY OwnerUserId;",ruleDescription:"This task focuses on aggregating user post data into a single view, facilitating analysis of user activity on the platform. The view summarizes the total number of posts, average score of these posts, and the highest view count among them for each user.",link:"https://docs.microsoft.com/en-us/sql/t-sql/statements/create-view-transact-sql"},{id:4,level:"view",description:"Design a view `RecentPosts` to display titles and creation dates of posts made in the last 30 days.",solution:"CREATE VIEW RecentPosts AS SELECT Title, CreationDate FROM Posts WHERE CreationDate >= DATEADD(day, -30, GETDATE());",ruleDescription:"This task aims to create a view that filters posts to those created within the last 30 days. It utilizes the DATEADD function alongside GETDATE() to dynamically calculate the 30-day threshold, showcasing how view can provide timely insights based on current date.",link:"https://docs.microsoft.com/en-us/sql/t-sql/functions/dateadd-transact-sql"}];var Le={name:"NavModule",data(){return{allTasks:{Basic:B,Intermediate:Se,Advanced:ke,Apply:Oe,WindowFunction:be,Joins:Ie,SQLFunction:Ce,View:Re},ruleDescription:"Select a task to see rules and guidelines.",filteredTasks:[],currentTaskIndex:-1,taskTitle:"Adjust Your Level of Challenge",currentLevel:"",userSolution:"",solutionCorrect:null,resultMessage:"",link:"",taskSolvedStatus:[],showSolutionButton:!1}},methods:{selectLevel(e){this.currentLevel=e,this.filteredTasks=this.allTasks[e],this.taskSolvedStatus=Array(this.filteredTasks.length).fill(null),this.currentTaskIndex=0,this.taskTitle=`Expert Level: ${e}`,this.updateRuleDescription(),this.updateLink(),this.hideSolution()},nextTask(){this.currentTaskIndex<this.filteredTasks.length-1?this.currentTaskIndex++:this.currentTaskIndex=0,this.updateTaskDetails(),this.resetTaskState(),this.hideSolution()},previousTask(){this.currentTaskIndex>0?this.currentTaskIndex--:this.currentTaskIndex=this.filteredTasks.length-1,this.updateTaskDetails(),this.resetTaskState(),this.hideSolution()},selectTask(e){this.currentTaskIndex=e,this.updateTaskDetails(),this.resetTaskState(),this.hideSolution()},updateTaskDetails(){const e=this.filteredTasks[this.currentTaskIndex];this.ruleDescription=e?e.ruleDescription:"No rule description available.",this.updateLink()},checkSolution(){if(-1===this.currentTaskIndex)return;const e=this.filteredTasks[this.currentTaskIndex],t=this.userSolution.trim().toLowerCase()===e.solution.trim().toLowerCase();this.taskSolvedStatus.splice(this.currentTaskIndex,1,t),this.solutionCorrect=t,this.resultMessage=t?"Correct":"Incorrect, try again!",this.showSolutionButton=!t,this.userSolution=""},showSolution(){if(!this.showSolutionButton)return;const e=this.filteredTasks[this.currentTaskIndex];this.userSolution=e.solution},hideSolution(){this.showSolutionButton&&(this.userSolution="",this.showSolutionButton=!1)},updateRuleDescription(){-1!==this.currentTaskIndex?this.ruleDescription=this.filteredTasks[this.currentTaskIndex].ruleDescription||"No rule description available.":this.ruleDescription="Select a task to see rules and guidelines."},updateLink(){const e=-1!==this.currentTaskIndex?this.filteredTasks[this.currentTaskIndex]:null;this.link=e&&e.link?e.link:""},openDocumentation(e){window.open(e,"_blank")},resetTaskState(){this.userSolution="",this.solutionCorrect=null,this.resultMessage=""}},computed:{currentTask(){return-1!==this.currentTaskIndex?this.filteredTasks[this.currentTaskIndex]:null}},watch:{currentLevel(){this.resetTaskState(),this.currentTaskIndex=0}}};const qe=(0,S.A)(Le,[["render",we],["__scopeId","data-v-715cc830"]]);var Ae=qe;const Ne=e=>((0,n.Qi)("data-v-6d7ee708"),e=e(),(0,n.jt)(),e),De=Ne((()=>(0,n.Lk)("link",{href:"https://use.fontawesome.com/releases/v5.15.4/css/all.css",rel:"stylesheet"},null,-1))),Pe={class:"contact-container"},Ue=Ne((()=>(0,n.Lk)("div",{class:"contact-header"},[(0,n.Lk)("h1",null,"Get In Touch!"),(0,n.Lk)("p",null,"Have suggestions or questions? I'd love to hear from you.")],-1))),Me={class:"contact-content"},Fe={key:0,class:"contact-form"},_e={class:"form-group"},Be={class:"form-group"},We=Ne((()=>(0,n.Lk)("button",{type:"submit",class:"submit-btn"},"Send Message",-1)));function Ye(e,t,s,o,a,r){return(0,n.uX)(),(0,n.CE)(n.FK,null,[De,(0,n.Lk)("div",Pe,[Ue,(0,n.Lk)("div",Me,[(0,n.Lk)("i",{class:"fas fa-envelope email-icon",onClick:t[0]||(t[0]=e=>a.showContactForm=!a.showContactForm)}),(0,n.bF)(i.eB,{name:"fade"},{default:(0,n.k6)((()=>[a.showContactForm?((0,n.uX)(),(0,n.CE)("div",Fe,[(0,n.Lk)("form",{onSubmit:t[3]||(t[3]=(0,i.D$)(((...e)=>r.sendEmail&&r.sendEmail(...e)),["prevent"]))},[(0,n.Lk)("div",_e,[(0,n.bo)((0,n.Lk)("input",{type:"email","onUpdate:modelValue":t[1]||(t[1]=e=>a.userEmail=e),placeholder:"Your Email",required:""},null,512),[[i.Jo,a.userEmail]])]),(0,n.Lk)("div",Be,[(0,n.bo)((0,n.Lk)("textarea",{"onUpdate:modelValue":t[2]||(t[2]=e=>a.userMessage=e),placeholder:"Your Message",required:"",rows:"4"},null,512),[[i.Jo,a.userMessage]])]),We],32)])):(0,n.Q3)("",!0)])),_:1})])])],64)}var xe={name:"NavContact",data(){return{showContactForm:!1,userEmail:"",userMessage:""}},methods:{sendEmail(){console.log("Email sent:",this.userEmail,this.userMessage),this.userEmail="",this.userMessage="",this.showContactForm=!1}}};const He=(0,S.A)(xe,[["render",Ye],["__scopeId","data-v-6d7ee708"]]);var Ge=He;const Ve=e=>((0,n.Qi)("data-v-628c60e1"),e=e(),(0,n.jt)(),e),Qe={class:"not-found"},Je=Ve((()=>(0,n.Lk)("h1",null,"404",-1))),je=Ve((()=>(0,n.Lk)("p",null,"Page not found.",-1)));function Xe(e,t,s,o,i,a){const r=(0,n.g2)("router-link");return(0,n.uX)(),(0,n.CE)("div",Qe,[Je,je,(0,n.bF)(r,{to:"/"},{default:(0,n.k6)((()=>[(0,n.eW)("Go Back Home")])),_:1})])}var ze={name:"NotFound"};const Ke=(0,S.A)(ze,[["render",Xe],["__scopeId","data-v-628c60e1"]]);var $e=Ke;const Ze=[{path:"/",name:"Home",component:J},{path:"/module",name:"About",component:Ae},{path:"/contact",name:"Contact",component:Ge},{path:"/:pathMatch(.*)*",name:"NotFound",component:$e}],et=(0,W.aE)({history:(0,W.LA)("/projectSQL/"),routes:Ze});var tt=et;const st=(0,i.Ef)(_);st.use(o["default"]),(0,i.Ef)(_).use(tt).mount("#app")}},t={};function s(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o].call(n.exports,n,n.exports,s),n.exports}s.m=e,function(){var e=[];s.O=function(t,o,i,n){if(!o){var a=1/0;for(u=0;u<e.length;u++){o=e[u][0],i=e[u][1],n=e[u][2];for(var r=!0,l=0;l<o.length;l++)(!1&n||a>=n)&&Object.keys(s.O).every((function(e){return s.O[e](o[l])}))?o.splice(l--,1):(r=!1,n<a&&(a=n));if(r){e.splice(u--,1);var c=i();void 0!==c&&(t=c)}}return t}n=n||0;for(var u=e.length;u>0&&e[u-1][2]>n;u--)e[u]=e[u-1];e[u]=[o,i,n]}}(),function(){s.d=function(e,t){for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})}}(),function(){s.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){s.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){var e={524:0};s.O.j=function(t){return 0===e[t]};var t=function(t,o){var i,n,a=o[0],r=o[1],l=o[2],c=0;if(a.some((function(t){return 0!==e[t]}))){for(i in r)s.o(r,i)&&(s.m[i]=r[i]);if(l)var u=l(s)}for(t&&t(o);c<a.length;c++)n=a[c],s.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return s.O(u)},o=self["webpackChunkmy_vue_app"]=self["webpackChunkmy_vue_app"]||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))}();var o=s.O(void 0,[504],(function(){return s(425)}));o=s.O(o)})();
//# sourceMappingURL=app.c4dbf65e.js.map